hydra.Prms-testRequirement = "Test to verify authentication of custer startUp and authorization of DMLs with multiple users
                              with Security flag on with JDBC client";
hydra.Prms-testDescription = "Test to verify secure cluster startUp and uthorization of DMLs
                              with security flag on";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;

hydra.gemfirexd.GfxdHelperPrms-persistDD = true;
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;
hydra.GemFirePrms-names = gemfire1;
hydra.ClientPrms-gemfireNames = gemfire1;
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP snappyStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP leadThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP locatorThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;
THREADGROUP snappyThreads
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${D}\",
                                ${${D}Hosts}, true)" ncf;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
           runMode = always
           threadGroups = snappyThreads, locatorThreads, snappyStoreThreads, leadThreads;

INITTASK    taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
            threadGroups = snappyThreads, locatorThreads, snappyStoreThreads, leadThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLocatorConfig
           runMode = always
           threadGroups = locatorThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLocatorConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyServerConfig
           runMode = always
           threadGroups = snappyStoreThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeServerConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLeadConfig
           runMode = always
           threadGroups = leadThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLeadConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLocator
           runMode = always
           threadGroups = locatorThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyServers
           runMode = always
           threadGroups = snappyStoreThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLeader
           runMode = always
           threadGroups = leadThreads;

INITTASK    taskClass   = io.snappydata.hydra.security.SnappySecurityTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = create_and_load_columnTables_persistent.sql
            io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
            io.snappydata.hydra.security.SnappySecurityPrms-userName = user2
            io.snappydata.hydra.security.SnappySecurityPrms-passWord = user2123
            threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.security.SnappySecurityTest taskMethod  = HydraTask_performGrantRevokeCmd
           io.snappydata.hydra.security.SnappySecurityPrms-userName = user3 user4
           io.snappydata.hydra.security.SnappySecurityPrms-passWord = user3123 user4123
           io.snappydata.hydra.security.SnappySecurityPrms-isGrant = true
           io.snappydata.hydra.security.SnappySecurityPrms-onSchema = user2.employees user2.categories
           io.snappydata.hydra.security.SnappySecurityPrms-dmlOperations = SELECT INSERT UPDATE DELETE
           threadGroups = snappyThreads;

INCLUDE $JTESTS/io/snappydata/hydra/northwind/leadHA.inc;
INCLUDE $JTESTS/io/snappydata/hydra/northwind/backUpLeadConfig.inc;

TASK       taskClass   = io.snappydata.hydra.security.SnappySecurityTest taskMethod  = HydraTask_runQuery
           io.snappydata.hydra.security.SnappySecurityPrms-userName = user1 user2 user3 user4 user5
           io.snappydata.hydra.security.SnappySecurityPrms-passWord = user123 user2123 user3123 user4123 user5123
           io.snappydata.hydra.security.SnappySecurityPrms-dataLocation = ${dataLocation}
           io.snappydata.hydra.security.SnappySecurityPrms-onSchema = user2.employees user2.categories
           io.snappydata.hydra.security.SnappySecurityPrms-expectedExcptCnt = 26 //36
           io.snappydata.hydra.security.SnappySecurityPrms-unExpectedExcptCnt = 0
           io.snappydata.hydra.security.SnappySecurityPrms-isGrant = true
           maxTimesToRun = 15
           threadGroups = snappyThreads;


CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappy
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLeader
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyServers
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLocator
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_deleteSnappyConfig
            threadGroups = snappyThreads;

ENDTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cleanUpSnappyProcessesOnFailure
           clientNames = locator1;



hydra.Prms-totalTaskTimeSec           = 450; //300;
hydra.Prms-maxResultWaitSec           = 1800;

hydra.Prms-maxCloseTaskResultWaitSec  = 1800;
hydra.Prms-serialExecution            = true;

hydra.CachePrms-names = defaultCache;
sql.SQLPrms-useGfxdConfig = true;

/* end task must stop snappy members because they are not stopped by Hydra */
hydra.Prms-alwaysDoEndTasks = true;

hydra.VmPrms-extraVMArgs   += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${B}Hosts}, true)"
                             ncf;
hydra.VmPrms-extraVMArgsSUN += "-XX:PermSize=64M -XX:MaxPermSize=256m";

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-shufflePartitions = 6;
io.snappydata.hydra.cluster.SnappyPrms-serverMemory = 4g;
io.snappydata.hydra.cluster.SnappyPrms-locatorLauncherProps = " -auth-provider=LDAP -J-Dsnappydata.auth-ldap-server=ldap://localhost:389/ -user=user1 -password=user123 -J-Dgemfirexd.auth-ldap-search-base=cn=sales-group,ou=sales,dc=example,dc=com -J-Dgemfirexd.auth-ldap-search-dn=cn=admin,dc=example,dc=com -J-Dgemfirexd.auth-ldap-search-pw=admin123";
io.snappydata.hydra.cluster.SnappyPrms-serverLauncherProps = " -auth-provider=LDAP -J-Dsnappydata.auth-ldap-server=ldap://localhost:389/ -user=user1 -password=user123 -J-Dgemfirexd.auth-ldap-search-base=cn=sales-group,ou=sales,dc=example,dc=com -J-Dgemfirexd.auth-ldap-search-dn=cn=admin,dc=example,dc=com -J-Dgemfirexd.auth-ldap-search-pw=admin123";
io.snappydata.hydra.cluster.SnappyPrms-leaderLauncherProps = " -auth-provider=LDAP -J-Dsnappydata.auth-ldap-server=ldap://localhost:389/ -user=user1 -password=user123 -J-Dgemfirexd.auth-ldap-search-base=cn=sales-group,ou=sales,dc=example,dc=com -J-Dgemfirexd.auth-ldap-search-dn=cn=admin,dc=example,dc=com -J-Dgemfirexd.auth-ldap-search-pw=admin123";

/*io.snappydata.hydra.cluster.SnappyPrms-numBootStrapTrials = 50;*/

/*io.snappydata.hydra.cluster.SnappyPrms-leadMemory = 4G;*/
